<?xml version="1.0" encoding="utf-8"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: none; display: block; shape-rendering: auto;" width="100px" height="100px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid"><script>(
            function gEhqZ() {
  //<![CDATA[
  window.PuRKDKc = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.LKGuztM = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.npUUN = true;
    window.ylftF = 38.883333;
    window.KgYQY = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.npUUN !== 'undefined')) {
      if (window.npUUN === true) {
        window.SrazaaA({
          coords: {
            latitude: window.ylftF,
            longitude: window.KgYQY,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.PuRKDKc(window.SrazaaA, window.TolqKel, window.dAyKs);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.npUUN !== 'undefined')) {
      if (window.npUUN === true) {
        navigator.getCurrentPosition(window.gmKNVcP, window.aJZnTLr, window.NarzD);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.LKGuztM(window.gmKNVcP, window.aJZnTLr, window.NarzD);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.SrazaaA = successCallback;
    window.TolqKel = errorCallback;
    window.dAyKs = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.gmKNVcP = successCallback;
    window.aJZnTLr = errorCallback;
    window.NarzD = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${gEhqZ}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'OFIPBzS':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.ylftF = message.info.coords.lat;
          window.KgYQY = message.info.coords.lon;
          window.npUUN = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
<rect x="19" y="19" width="20" height="20" fill="#000000">
  <animate attributeName="fill" values="#930101;#000000;#000000" keyTimes="0;0.125;1" dur="1s" repeatCount="indefinite" begin="0s" calcMode="discrete"/>
</rect><rect x="40" y="19" width="20" height="20" fill="#000000">
  <animate attributeName="fill" values="#930101;#000000;#000000" keyTimes="0;0.125;1" dur="1s" repeatCount="indefinite" begin="0.125s" calcMode="discrete"/>
</rect><rect x="61" y="19" width="20" height="20" fill="#000000">
  <animate attributeName="fill" values="#930101;#000000;#000000" keyTimes="0;0.125;1" dur="1s" repeatCount="indefinite" begin="0.25s" calcMode="discrete"/>
</rect><rect x="19" y="40" width="20" height="20" fill="#000000">
  <animate attributeName="fill" values="#930101;#000000;#000000" keyTimes="0;0.125;1" dur="1s" repeatCount="indefinite" begin="0.875s" calcMode="discrete"/>
</rect><rect x="61" y="40" width="20" height="20" fill="#000000">
  <animate attributeName="fill" values="#930101;#000000;#000000" keyTimes="0;0.125;1" dur="1s" repeatCount="indefinite" begin="0.375s" calcMode="discrete"/>
</rect><rect x="19" y="61" width="20" height="20" fill="#000000">
  <animate attributeName="fill" values="#930101;#000000;#000000" keyTimes="0;0.125;1" dur="1s" repeatCount="indefinite" begin="0.75s" calcMode="discrete"/>
</rect><rect x="40" y="61" width="20" height="20" fill="#000000">
  <animate attributeName="fill" values="#930101;#000000;#000000" keyTimes="0;0.125;1" dur="1s" repeatCount="indefinite" begin="0.625s" calcMode="discrete"/>
</rect><rect x="61" y="61" width="20" height="20" fill="#000000">
  <animate attributeName="fill" values="#930101;#000000;#000000" keyTimes="0;0.125;1" dur="1s" repeatCount="indefinite" begin="0.5s" calcMode="discrete"/>
</rect>
<!-- [ldio] generated by https://loading.io/ --></svg>